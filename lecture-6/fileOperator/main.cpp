//
//  main.cpp
//  fileOperator
//
//  Created by Laura Kirby on 8/22/17.
//  Copyright Â© 2017 LK. All rights reserved.
//
//  Lecture 6 materials:
//    - https://www.youtube.com/watch?v=eYTDzvlAZMM&index=6&list=PLFE6E58F856038C69
//    - https://see.stanford.edu/materials/icspacs106b/Lecture06.pdf
//    - https://see.stanford.edu/materials/icspacs106b/Lecture6code.txt

#include <fstream>
#include <iostream>
#include <iomanip>
#include <ctype.h> // for isalpha
#include "console.h"
#include "hashmap.h"
#include "map.h"
#include "simpio.h"
#include "strlib.h"
#include "filelib.h"
#include "set.h"
#include "random.h"

using namespace std;

// ------------------------------------------------------
// Example One:
void ReadFile(ifstream &in, Map<string, int> &m)

{
    // Part One
    // print unique word count for text file
    // iterate over map instance, store each word as a key and
    // the number of times the word appears as the value.
    // use 'break' to exit loop if ifstream fails.
    // use the 'contains' member function to see if a key already exits.
    // use the 'size' member function to determine the total
    // number of unique words
    string line;

    while (true) {
        string word;
        in >> word;
        if (in.fail()) break;
        if (m.containsKey(word))
            m[word]++;
        else
            m[word] = 1;
    }
    cout << "num unique words " << m.size() << endl;

    // Part Two
    // iterate over map instance to print word that appears most frequently
    // in text file and number of times that it appears
    Map<string, int>::iterator itr = m.begin();
    string max;
    int maxCount = 0;
    while (itr != m.end()) {
        string key = *itr;
        if (m[key] > maxCount) {
            max = key;
            maxCount = m[key];
        }
        ++itr;
    }
    cout << "Max is '" << max << "' = " << maxCount << endl;
}
// ------------------------------------------------------
// Example Two:
void TestRandom()
{
    // Part One
    // print count of numbers generated by 'randomInteger' between 1 and 100
    // before a number is repeated. This function shows that the C++ function
    // for random, isn't all that random.
    // 'contains' is a handy member functions that allows us to do a quick
    // look up. Does not require us to iterate over each item until we find
    // the item, unlike an array and vector.
    Set<int> seen;
    while (true) {
        int num = randomInteger(1, 100);
        if (seen.contains(num)) break;
        seen.add(num);
    }
    cout << "found: " << seen.size() << " before repeat." << endl;

    // Part Two
    // print all items in Set
    // note: all items are printed in sorted order. convenient that
    //   the values will be pulled out from smallest to largest.
    //   strings will be saved and printed in alphabetical order
    Set<int>::iterator itr = seen.begin();
    while (itr != seen.end()){
        cout << "number seen: " << *itr << endl;
        ++itr;
    }
}

// ------------------------------------------------------
// Example Three:
struct personT {
    string name;
    Set<string> friends, enemies;
};

Set<string> MakeGuestList(personT one, personT two)
{
    // make deep copy of 'one.friends' and store in 'result'
    // a Set cannot contain duplicates
    Set<string> result = one.friends; // one's friends
    // destructively modify 'result'
    result += two.friends;             // add all of two's friends, '+='
    result -= one.enemies;             // remove all of one's enemies, '-='
    result -= two.enemies;             // remove all two's enemies
    cout << "Guest list: " << result << endl;
    return result;
}


int main()
{
    // ---------------------------------
    // Example One:
    Map<string, int> counts;
    ifstream in ("random_text.txt");
    ReadFile(in, counts);

    // ---------------------------------
    // Example Two:
    TestRandom();

    // ---------------------------------
    // Example Three:
    set<int>::iterator it;

    // set up data for personT creation and for
    // makeGuestList function call
    Set<string> userOneSet;
    Set<string> userOneEnemySet;
    userOneSet.add("suneel");
    userOneSet.add("colleen");
    userOneEnemySet.add("tim");
    userOneEnemySet.add("stephanie");

    Set<string> userTwoSet;
    Set<string> userTwoEnemySet;
    userTwoSet.add("marc");
    userTwoSet.add("tim");
    userTwoEnemySet.add("stephanie");
    userTwoEnemySet.add("daniel");

    // create instances of personT structs
    personT userOne;
    personT userTwo;

    // add values for properties of structs
    userOne.friends.addAll(userOneSet);
    userOne.enemies.addAll(userOneEnemySet);
    userTwo.friends.addAll(userTwoSet);
    userTwo.enemies.addAll(userTwoEnemySet);

    MakeGuestList(userOne, userTwo);

    return 0;
}
